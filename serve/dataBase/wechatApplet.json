{"title":"备注注解","name":"Wechatapplet","key":"wechatApplet","data":[{"answerTimes":"","frequentProblems":"","rightAndWrongTimes":"","modify":"","name":"★★ 简单描述下微信小程序的相关文件类型","key":"wechatApplet1","answer":"微信小程序项目结构主要有四个文件类型\n\nWXML（WeiXin Markup Language）是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。内部主要是微信自己定义的一套组件\nWXSS (WeiXin Style Sheets)是一套样式语言，用于描述 WXML 的组件样式\njs 逻辑处理，网络请求\njson 小程序设置，如页面注册，页面标题及tabBar\n主要文件\n\napp.json 必须要有这个文件，如果没有这个文件，项目无法运行，因为微信框架把这个作为配置文件入口，整个小程序的全局配置。包括页面注册，网络设置，以及小程序的 window 背景色，配置导航条样式，配置默认标题\napp.js 必须要有这个文件，没有也是会报错！但是这个文件创建一下就行 什么都不需要写以后我们可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量\napp.wxss 可选"},{"answerTimes":"","frequentProblems":"","rightAndWrongTimes":"","modify":"","name":" ★★★★ 简述微信小程序原理","key":"wechatApplet2","answer":"微信小程序采用 JavaScript、WXML、WXSS 三种技术进行开发,本质就是一个单页面应用，所有的页面渲染和事件处理，都在一个页面内进行，但又可以通过微信客户端调用原生的各种接口微信的架构，是数据驱动的架构模式，它的 UI 和数据是分离的，所有的页面更新，都需要通过对数据的更改来实现 小程序分为两个部分 webview 和 appService 。其中 webview 主要用来展现 UI ，appService 有来处理业务逻辑、数据及接口调用。它们在两个进程中运行，通过系统层 JSBridge 实现通信，实现 UI 的渲染、事件的处理"},{"answerTimes":"","frequentProblems":"","rightAndWrongTimes":"","modify":"","name":" ★★★ 小程序的双向绑定和vue哪里不一样","key":"wechatApplet3","answer":"小程序直接 this.data 的属性是不可以同步到视图的，必须调用：\n\n微信小程序在初始化之后，再对原来的数据对象进行任何更改，都始终不会生效！只能手动调用setData接口明确指明同步哪些键/值至视图层才会触发更新 vue则是对数据对象进行了监听，只要有更改就可以并且会立即触发视图层的更新\n\nthis.setData({\n    // 这里设置\n})\n设置值\n\n在vue中,只需要再表单元素上加上v-model,然后再绑定data中对应的一个值，当表单元素内容发生变化时，data中对应的值也会相应改变，这是vue非常nice的一点。 ```js\n\nnew Vue({\nel: '#app',\ndata: {\nreason:''\n}\n})\n\n- 但是在小程序中，却没有这个功能。那怎么办呢？当表单内容发生变化时，会触发表单元素上绑定的方法，然后在该方法中，通过this.setData({key:value})来将表单上的值赋值给data中的对应值。下面是代码，可以感受一下:\n```js\n<input bindinput=\"bindReason\" placeholder=\"填写理由\" class='reason' value='{{reason}}' name=\"reason\" />  \n  Page({  \n  data:{  \n  reason:''  \n  },  \n  bindReason(e) {  \n  this.setData({  \n  reason: e.detail.value  \n  })  \n  }  \n  })\n当页面表单元素很多的时候，更改值就是一件体力活了。和小程序一比较，vue的v-model简直爽的不要不要的。\n\n取值\n\nvue中，通过this.reason取值\n\n小程序中，通过this.data.reason取值"}],"isChoice":false}